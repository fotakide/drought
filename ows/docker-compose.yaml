# Default compose will create an ows image, with dev settings and connect to a local db
name: drought

volumes:
  nas_drought:
    driver: local
    driver_opts:
      type: cifs
      device: "//nas-rs.topo.auth.gr/Latomeia/DROUGHT"
      o: "username=${NAS_USER},password=${NAS_PASS},vers=3.0,ro,dir_mode=0777,file_mode=0777,uid=1000,gid=1000"

services:
  drought_ows:
    build:
      context: .
      args:
        PYDEV_DEBUG: "${PYDEV_DEBUG}"
        ENVIRONMENT: test
      # cache_from:
      #   - opendatacube/ows:_builder
    image: opendatacube/ows:latest
    # Uncomment for use with non-dockerised postgres (for docker-compose 1.x)
    # network_mode: host
    environment:
      LOCAL_UID: ${LOCAL_UID:-1000}
      LOCAL_GID: ${LOCAL_GID:-1000}
      # Defaults are defined in .env file
      # AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      # AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # AWS_REQUEST_PAYER: ${AWS_REQUEST_PAYER}
      # AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
      # Hard coded for now.
      ODC_ENVIRONMENT: default
      ODC_DEFAULT_INDEX_DRIVER: postgres
      ODC_OWSPOSTGIS_INDEX_DRIVER: postgis
      # Please switch to single entry url configuration for postgres url
      # ODC_ODC2_INDEX_DRIVER: ${ODC_ODC2_INDEX_DRIVER}
      # ODC_ODC2_DB_URL: ${ODC_ODC2_DB_URL}
      ODC_DEFAULT_DB_URL: ${ODC_DEFAULT_DB_URL}
      ODC_OWSPOSTGIS_DB_URL: ${ODC_OWSPOSTGIS_DB_URL}
      # for wait-for-db check
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      SERVER_DB_USERNAME: ${SERVER_DB_USERNAME}
      # Path from the PYTHONPATH to the config object (default PYTHONPATH is /src)
      PYTHONPATH: ${PYTHONPATH}
      DATACUBE_OWS_CFG: ${DATACUBE_OWS_CFG}
      # AWS_DEFAULT_REGION: ${AWS_REGION}
      # Talk to AWS without using credentials
      # AWS_NO_SIGN_REQUEST: "${AWS_NO_SIGN_REQUEST}"
      # Enable Metrics
      PROMETHEUS_MULTIPROC_DIR: ${PROMETHEUS_MULTIPROC_DIR}
      # Dev flags
      FLASK_APP: /src/datacube_ows/ogc.py
      # FLASK_ENV: ${FLASK_ENV}
      PYDEV_DEBUG: "${PYDEV_DEBUG}"
      SENTRY_DSN: "${SENTRY_DSN}"
    volumes:
      - ${OWS_CFG_DIR}:${OWS_CFG_MOUNT_DIR}
      - ./:/src/
      - ./artifacts:/mnt/artifacts
      - type: volume
        source: nas_drought
        target: /nas/Latomeia/DROUGHT
        read_only: true
      # - type: bind
      #   source: //nas-rs.topo.auth.gr/Latomeia/DROUGHT
      #   target: /nas/Latomeia/DROUGHT
      #   read_only: true
    restart: always
    ports:
      - 9000:9000
    command: ["flask", "run", "--host=0.0.0.0", "--port=9000"]
    # command: ["/bin/sh", "-c", "ln -s /D /D: && flask run --host=0.0.0.0 --port=8000"]

# volumes:
# drought_nas:
#   driver: local
#   driver_opts:
#     type: cifs
#     device: "//nas-rs.topo.auth.gr/Latomeia"  # or "//nas-rs.topo.auth.gr/Latomeia/DROUGHT" to limit scope
#     o: "username=${NAS_USER},password=${NAS_PASSWORD},vers=3.0,dir_mode=0777,file_mode=0777,uid=0,gid=0,noperm"